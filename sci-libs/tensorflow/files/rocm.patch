diff --color -upr orig/third_party/gpus/rocm_configure.bzl tensorflow-2.5.0/third_party/gpus/rocm_configure.bzl
--- orig/third_party/gpus/rocm_configure.bzl	2021-10-26 11:01:14.677926624 +0800
+++ tensorflow-2.5.0/third_party/gpus/rocm_configure.bzl	2021-10-26 13:17:01.990086861 +0800
@@ -182,19 +182,7 @@ def _rocm_include_path(repository_ctx, r
 
     # Add HIP-Clang headers (realpath relative to compiler binary)
     rocm_toolkit_path = realpath(repository_ctx, rocm_config.rocm_toolkit_path, bash_bin)
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/8.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/9.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/10.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/11.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/12.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/13.0.0/include")
-
-    # Support hcc based off clang 10.0.0 (for ROCm 3.3)
-    inc_dirs.append(rocm_toolkit_path + "/hcc/compiler/lib/clang/10.0.0/include/")
-    inc_dirs.append(rocm_toolkit_path + "/hcc/lib/clang/10.0.0/include")
-
-    # Add hcc headers
-    inc_dirs.append(rocm_toolkit_path + "/hcc/include")
+    inc_dirs.append("@GENTOO_PORTAGE_EPREFIX@/usr/lib/llvm/roc/lib/clang/13.0.0/include")
 
     return inc_dirs
 
@@ -326,15 +314,15 @@ def _find_libs(repository_ctx, rocm_conf
     libs_paths = [
         (name, _rocm_lib_paths(repository_ctx, name, path))
         for name, path in [
-            ("amdhip64", rocm_config.rocm_toolkit_path + "/hip"),
-            ("rocblas", rocm_config.rocm_toolkit_path + "/rocblas"),
-            (hipfft_or_rocfft, rocm_config.rocm_toolkit_path + "/" + hipfft_or_rocfft),
-            ("hiprand", rocm_config.rocm_toolkit_path + "/hiprand"),
-            ("MIOpen", rocm_config.rocm_toolkit_path + "/miopen"),
-            ("rccl", rocm_config.rocm_toolkit_path + "/rccl"),
-            ("hipsparse", rocm_config.rocm_toolkit_path + "/hipsparse"),
-            ("roctracer64", rocm_config.rocm_toolkit_path + "/roctracer"),
-            ("rocsolver", rocm_config.rocm_toolkit_path + "/rocsolver"),
+            ("amdhip64", "@GENTOO_PORTAGE_EPREFIX@/usr/lib/hip/lib"),
+            ("rocblas", "@GENTOO_PORTAGE_EPREFIX@/usr/lib64"),
+            (hipfft_or_rocfft, "@GENTOO_PORTAGE_EPREFIX@/usr/lib64"),
+            ("hiprand", "@GENTOO_PORTAGE_EPREFIX@/usr/lib64"),
+            ("MIOpen", "@GENTOO_PORTAGE_EPREFIX@/usr/lib64"),
+            ("rccl", "@GENTOO_PORTAGE_EPREFIX@/usr/lib64"),
+            ("hipsparse", "@GENTOO_PORTAGE_EPREFIX@/usr/lib64"),
+            ("roctracer64", "@GENTOO_PORTAGE_EPREFIX@/usr/lib64/roctracer"),
+            ("rocsolver", "@GENTOO_PORTAGE_EPREFIX@/usr/lib64"),
         ]
     ]
 
@@ -549,80 +537,78 @@ def _create_local_rocm_repository(reposi
     copy_rules = [
         make_copy_dir_rule(
             repository_ctx,
-            name = "rocm-include",
-            src_dir = rocm_toolkit_path + "/include",
-            out_dir = "rocm/include",
-            exceptions = ["gtest", "gmock"],
-        ),
-        make_copy_dir_rule(
-            repository_ctx,
             name = hipfft_or_rocfft + "-include",
-            src_dir = rocm_toolkit_path + "/" + hipfft_or_rocfft + "/include",
+            src_dir = rocm_toolkit_path + "/include/" + hipfft_or_rocfft,
             out_dir = "rocm/include/" + hipfft_or_rocfft,
         ),
         make_copy_dir_rule(
             repository_ctx,
             name = "rocblas-include",
-            src_dir = rocm_toolkit_path + "/rocblas/include",
-            out_dir = "rocm/include/rocblas",
+            src_dir = rocm_toolkit_path + "/include/rocblas",
+            out_dir = "rocm/include/",
         ),
         make_copy_dir_rule(
             repository_ctx,
             name = "miopen-include",
-            src_dir = rocm_toolkit_path + "/miopen/include",
+            src_dir = rocm_toolkit_path + "/include/miopen",
             out_dir = "rocm/include/miopen",
         ),
-        make_copy_dir_rule(
+        make_copy_files_rule(
             repository_ctx,
             name = "rccl-include",
-            src_dir = rocm_toolkit_path + "/rccl/include",
-            out_dir = "rocm/include/rccl",
+            srcs = [rocm_toolkit_path + "/include/rccl.h",],
+            outs = ["rocm/include/rccl/rccl.h",],
         ),
         make_copy_dir_rule(
             repository_ctx,
             name = "hipsparse-include",
-            src_dir = rocm_toolkit_path + "/hipsparse/include",
+            src_dir = rocm_toolkit_path + "/include/hipsparse",
             out_dir = "rocm/include/hipsparse",
         ),
         make_copy_dir_rule(
             repository_ctx,
             name = "rocsolver-include",
-            src_dir = rocm_toolkit_path + "/rocsolver/include",
+            src_dir = rocm_toolkit_path + "/include/rocsolver",
             out_dir = "rocm/include/rocsolver",
         ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "rocprim-include",
+            src_dir = rocm_toolkit_path + "/include/rocprim",
+            out_dir = "rocm/include/rocprim",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "hipcub-include",
+            src_dir = rocm_toolkit_path + "/include/hipcub",
+            out_dir = "rocm/include/hipcub",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "roctracer-include",
+            src_dir = rocm_toolkit_path + "/include/roctracer",
+            out_dir = "rocm/include/roctracer",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "hip-include",
+            src_dir = rocm_toolkit_path + "/lib/hip/include/hip",
+            out_dir = "rocm/include/hip",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "rocrand-include",
+            src_dir = rocm_toolkit_path + "/include/rocrand",
+            out_dir = "rocm/include/rocrand",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "hiprand-include",
+            src_dir = rocm_toolkit_path + "/include/hiprand",
+            out_dir = "rocm/include/hiprand",
+        ),
     ]
 
-    # explicitly copy (into the local_config_rocm repo) the $ROCM_PATH/hiprand/include and
-    # $ROCM_PATH/rocrand/include dirs, only once the softlink to them in $ROCM_PATH/include
-    # dir has been removed. This removal will happen in a near-future ROCm release.
-    hiprand_include = ""
-    hiprand_include_softlink = rocm_config.rocm_toolkit_path + "/include/hiprand"
-    softlink_exists = files_exist(repository_ctx, [hiprand_include_softlink], bash_bin)
-    if not softlink_exists[0]:
-        hiprand_include = '":hiprand-include",\n'
-        copy_rules.append(
-            make_copy_dir_rule(
-                repository_ctx,
-                name = "hiprand-include",
-                src_dir = rocm_toolkit_path + "/hiprand/include",
-                out_dir = "rocm/include/hiprand",
-            )
-        )
-
-    rocrand_include = ""
-    rocrand_include_softlink = rocm_config.rocm_toolkit_path + "/include/rocrand"
-    softlink_exists = files_exist(repository_ctx, [rocrand_include_softlink], bash_bin)
-    if not softlink_exists[0]:
-        rocrand_include = '":rocrand-include",\n'
-        copy_rules.append(
-            make_copy_dir_rule(
-                repository_ctx,
-                name = "rocrand-include",
-                src_dir = rocm_toolkit_path + "/rocrand/include",
-                out_dir = "rocm/include/rocrand",
-            )
-        )
-
     rocm_libs = _find_libs(repository_ctx, rocm_config, hipfft_or_rocfft, bash_bin)
     rocm_lib_srcs = []
     rocm_lib_outs = []
@@ -679,14 +665,17 @@ def _create_local_rocm_repository(reposi
             "%{roctracer_lib}": rocm_libs["roctracer64"].file_name,
             "%{rocsolver_lib}": rocm_libs["rocsolver"].file_name,
             "%{copy_rules}": "\n".join(copy_rules),
-            "%{rocm_headers}": ('":rocm-include",\n' +
-                                '":' + hipfft_or_rocfft + '-include",\n' +
+            "%{rocm_headers}": ('":' + hipfft_or_rocfft + '-include",\n' +
                                 '":rocblas-include",\n' +
+                                '":roctracer-include",\n' +
+								'":hipcub-include",\n' +
+								'":hip-include",\n' +
                                 '":miopen-include",\n' +
                                 '":rccl-include",\n' +
-                                hiprand_include +
-                                rocrand_include +
                                 '":hipsparse-include",\n' +
+                                '":hiprand-include",\n' +
+                                '":rocrand-include",\n' +
+                                '":rocprim-include",\n' +
                                 '":rocsolver-include"'),
         },
     )
@@ -721,7 +710,7 @@ def _create_local_rocm_repository(reposi
     rocm_defines["%{host_compiler_path}"] = "clang/bin/crosstool_wrapper_driver_is_not_gcc"
 
     rocm_defines["%{cxx_builtin_include_directories}"] = to_list_of_strings(
-        host_compiler_includes + _rocm_include_path(repository_ctx, rocm_config, bash_bin),
+        host_compiler_includes + _rocm_include_path(repository_ctx, rocm_config, bash_bin) + ['@GENTOO_PORTAGE_EPREFIX@/usr/lib/hip/include', '@GENTOO_PORTAGE_EPREFIX@/usr/lib/llvm/roc/include'],
     )
 
     verify_build_defines(rocm_defines)
@@ -745,11 +734,11 @@ def _create_local_rocm_repository(reposi
         tpl_paths["crosstool:clang/bin/crosstool_wrapper_driver_rocm"],
         {
             "%{cpu_compiler}": str(cc),
-            "%{hipcc_path}": rocm_config.rocm_toolkit_path + "/hip/bin/hipcc",
+            "%{hipcc_path}": rocm_config.rocm_toolkit_path + "/lib/hip/bin/hipcc",
             "%{hipcc_env}": _hipcc_env(repository_ctx),
-            "%{rocr_runtime_path}": rocm_config.rocm_toolkit_path + "/lib",
+            "%{rocr_runtime_path}": rocm_config.rocm_toolkit_path + "/lib64",
             "%{rocr_runtime_library}": "hsa-runtime64",
-            "%{hip_runtime_path}": rocm_config.rocm_toolkit_path + "/hip/lib",
+            "%{hip_runtime_path}": rocm_config.rocm_toolkit_path + "/lib/hip/lib",
             "%{hip_runtime_library}": "amdhip64",
             "%{crosstool_verbose}": _crosstool_verbose(repository_ctx),
             "%{gcc_host_compiler_path}": str(cc),
diff --color -upr a/tensorflowcompiler/xla/service/gpu/llvm_gpu_backend/gpu_backend_lib.cc tensorflow/compiler/xla/service/gpu/llvm_gpu_backend/gpu_backend_lib.cc
--- a/tensorflowcompiler/xla/service/gpu/llvm_gpu_backend/gpu_backend_lib.cc	2021-05-12 21:26:41.000000000 +0800
+++ b/tensorflow/compiler/xla/service/gpu/llvm_gpu_backend/gpu_backend_lib.cc	2021-10-26 13:43:26.628572583 +0800
@@ -730,7 +730,7 @@ StatusOr<std::vector<uint8>> EmitModuleT
   // TODO(whchung@gmail.com): change to tensorflow::ROCmRoot() after
   // ROCm-Device-Libs PR.
   std::string lld_path_1 = tensorflow::io::JoinPath("/opt/rocm", "hcc/bin");
-  std::string lld_path_2 = tensorflow::io::JoinPath("/opt/rocm", "llvm/bin");
+  std::string lld_path_2 = tensorflow::io::JoinPath("@GENTOO_PORTAGE_EPREFIX@/usr/lib/llvm/roc", "bin");
   auto lld_program =
       llvm::sys::findProgramByName("ld.lld", {lld_path_1, lld_path_2});
   if (!lld_program) {
diff --color -upr a/tensorflowcore/platform/default/rocm_rocdl_path.cc tensorflow/core/platform/default/rocm_rocdl_path.cc
--- a/tensorflowcore/platform/default/rocm_rocdl_path.cc	2021-05-12 21:26:41.000000000 +0800
+++ b/tensorflow/core/platform/default/rocm_rocdl_path.cc	2021-10-26 13:43:26.800571563 +0800
@@ -37,7 +37,7 @@ string RocmRoot() {
 
 string RocdlRoot() {
 #if TF_ROCM_VERSION >= 30900
-  return tensorflow::io::JoinPath(tensorflow::RocmRoot(), "amdgcn/bitcode");
+  return tensorflow::io::JoinPath(tensorflow::RocmRoot(), "lib/amdgcn/bitcode");
 #else
   return tensorflow::io::JoinPath(tensorflow::RocmRoot(), "lib");
 #endif
diff --color -upr a/tensorflowstream_executor/gpu/asm_compiler.cc tensorflow/stream_executor/gpu/asm_compiler.cc
--- a/tensorflowstream_executor/gpu/asm_compiler.cc	2021-05-12 21:26:41.000000000 +0800
+++ b/tensorflow/stream_executor/gpu/asm_compiler.cc	2021-10-26 13:43:26.956570635 +0800
@@ -384,7 +384,7 @@ static std::string findRocmExecutable(co
 port::StatusOr<std::vector<uint8>> BundleGpuAsm(
     std::vector<HsacoImage> images, const std::string rocm_root_dir) {
   std::string clang_offload_bundler_path =
-      findRocmExecutable("llvm/bin/clang-offload-bundler", rocm_root_dir);
+      findRocmExecutable("lib/llvm/roc/bin/clang-offload-bundler", rocm_root_dir);
 
   // Initialise the "--inputs" / "--targets" arguments for the
   // clang-offload-bundler with a dummy file / host target triple...
diff --color -upr orig/third_party/gpus/find_rocm_config.py tensorflow-2.5.0/third_party/gpus/find_rocm_config.py
--- orig/third_party/gpus/find_rocm_config.py	2021-10-12 20:40:29.201725834 +0800
+++ tensorflow-2.5.0/third_party/gpus/find_rocm_config.py	2021-10-12 20:40:53.109621436 +0800
@@ -70,13 +70,8 @@ def _get_header_version(path, name):
 def _find_rocm_config(rocm_install_path):
 
   def rocm_version_numbers(path):
-    version_file = os.path.join(path, ".info/version-dev")
-    if not os.path.exists(version_file):
-      raise ConfigError('ROCm version file "{}" not found'.format(version_file))
-    version_numbers = []
-    with open(version_file) as f:
-      version_string = f.read().strip()
-      version_numbers = version_string.split(".")
+    version_string = "@ROCM_VERSION@"
+    version_numbers = version_string.split(".")
     major = int(version_numbers[0])
     minor = int(version_numbers[1])
     patch = int(version_numbers[2].split("-")[0])
@@ -94,7 +89,7 @@ def _find_rocm_config(rocm_install_path)
 def _find_hipruntime_config(rocm_install_path):
 
   def hipruntime_version_number(path):
-    version_file = os.path.join(path, "hip/include/hip/hip_version.h")
+    version_file = os.path.join(path, "lib/hip/include/hip/hip_version.h")
     if not os.path.exists(version_file):
       raise ConfigError(
           'HIP Runtime version file "{}" not found'.format(version_file))
@@ -116,7 +111,7 @@ def _find_hipruntime_config(rocm_install
 def _find_miopen_config(rocm_install_path):
 
   def miopen_version_numbers(path):
-    version_file = os.path.join(path, "miopen/include/miopen/version.h")
+    version_file = os.path.join(path, "include/miopen/version.h")
     if not os.path.exists(version_file):
       raise ConfigError(
           'MIOpen version file "{}" not found'.format(version_file))
@@ -139,8 +134,8 @@ def _find_rocblas_config(rocm_install_pa
 
   def rocblas_version_numbers(path):
     possible_version_files = [
-        "rocblas/include/rocblas-version.h",  # ROCm 3.7 and prior
-        "rocblas/include/internal/rocblas-version.h",  # ROCm 3.8
+        "include/rocblas/rocblas-version.h",  # ROCm 3.7 and prior
+        "include/rocblas/internal/rocblas-version.h",  # ROCm 3.8
     ]
     version_file = None
     for f in possible_version_files:
@@ -170,7 +165,7 @@ def _find_rocblas_config(rocm_install_pa
 def _find_rocrand_config(rocm_install_path):
 
   def rocrand_version_number(path):
-    version_file = os.path.join(path, "rocrand/include/rocrand_version.h")
+    version_file = os.path.join(path, "include/rocrand/rocrand_version.h")
     if not os.path.exists(version_file):
       raise ConfigError(
           'rocblas version file "{}" not found'.format(version_file))
@@ -187,7 +182,7 @@ def _find_rocrand_config(rocm_install_pa
 def _find_rocfft_config(rocm_install_path):
 
   def rocfft_version_numbers(path):
-    version_file = os.path.join(path, "rocfft/include/rocfft-version.h")
+    version_file = os.path.join(path, "include/rocFFT/rocfft-version.h")
     if not os.path.exists(version_file):
       raise ConfigError(
           'rocfft version file "{}" not found'.format(version_file))
@@ -209,7 +204,7 @@ def _find_rocfft_config(rocm_install_pat
 def _find_hipfft_config(rocm_install_path):
 
   def hipfft_version_numbers(path):
-    version_file = os.path.join(path, "hipfft/include/hipfft-version.h")
+    version_file = os.path.join(path, "include/hipfft/hipfft-version.h")
     if not os.path.exists(version_file):
       raise ConfigError(
           'hipfft version file "{}" not found'.format(version_file))
@@ -231,7 +226,7 @@ def _find_hipfft_config(rocm_install_pat
 def _find_roctracer_config(rocm_install_path):
 
   def roctracer_version_numbers(path):
-    version_file = os.path.join(path, "roctracer/include/roctracer.h")
+    version_file = os.path.join(path, "include/roctracer/roctracer.h")
     if not os.path.exists(version_file):
       raise ConfigError(
           'roctracer version file "{}" not found'.format(version_file))
@@ -254,7 +249,7 @@ def _find_roctracer_config(rocm_install_
 def _find_hipsparse_config(rocm_install_path):
 
   def hipsparse_version_numbers(path):
-    version_file = os.path.join(path, "hipsparse/include/hipsparse-version.h")
+    version_file = os.path.join(path, "include/hipsparse/hipsparse-version.h")
     if not os.path.exists(version_file):
       raise ConfigError(
           'hipsparse version file "{}" not found'.format(version_file))
@@ -276,7 +271,7 @@ def _find_hipsparse_config(rocm_install_
 def _find_rocsolver_config(rocm_install_path):
 
   def rocsolver_version_numbers(path):
-    version_file = os.path.join(path, "rocsolver/include/rocsolver-version.h")
+    version_file = os.path.join(path, "include/rocsolver/rocsolver-version.h")
     if not os.path.exists(version_file):
       raise ConfigError(
           'rocsolver version file "{}" not found'.format(version_file))
diff --color -upr orig/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_rocm.tpl tensorflow-2.5.0/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_rocm.tpl
--- orig/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_rocm.tpl	2021-10-27 00:14:42.956249635 +0800
+++ tensorflow-2.5.0/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_rocm.tpl	2021-10-27 11:11:07.309805183 +0800
@@ -56,9 +56,9 @@ def GetOptionValue(argv, option):
   parser.add_argument('-' + option, nargs='*', action='append')
   args, _ = parser.parse_known_args(argv)
-  if not args or not vars(args)[option]:
+  if not args or not vars(args)[option.strip('-').replace('-','_')]:
     return []
   else:
-    return sum(vars(args)[option], [])
+    return sum(vars(args)[option.strip('-').replace('-','_')], [])
 
 
 def GetHostCompilerOptions(argv):
@@ -138,6 +138,7 @@ def InvokeHipcc(argv, log=False):
   hipcc_allowed_std_options = ["c++11"]
   std_options = ''.join([' -std=' + define
       for define in std_options if define in hipcc_allowed_std_options])
+  gpu_archs = GetOptionValue(argv, '-amdgpu-target')
 
   # The list of source files get passed after the -c option. I don't know of
   # any other reliable way to just get the list of source files to be compiled.
@@ -179,6 +180,7 @@ def InvokeHipcc(argv, log=False):
   hipccopts += defines
   hipccopts += std_options
   hipccopts += m_options
+  hipccopts += ' ' + ' '.join(['--amdgpu-target=' + arch for arch in gpu_archs])
 
   if depfiles:
     # Generate the dependency file
diff --color -upr orig/compiler/mlir/tools/kernel_gen/transforms/gpu_kernel_to_blob_pass.cc tensorflow/compiler/mlir/tools/kernel_gen/transforms/gpu_kernel_to_blob_pass.cc
--- orig/tensorflow/compiler/mlir/tools/kernel_gen/transforms/gpu_kernel_to_blob_pass.cc	2021-10-27 11:51:07.903006297 +0800
+++ tensorflow-2.5.0/tensorflow/compiler/mlir/tools/kernel_gen/transforms/gpu_kernel_to_blob_pass.cc	2021-10-27 11:49:31.797289639 +0800
@@ -113,7 +113,8 @@ class GpuKernelToBlobPass
             "Could not parse ROCm architecture prefix (expected gfx)");
       }
       uint32_t arch;
-      if (!absl::SimpleAtoi(consumable_arch, &arch)) {
+      absl::SimpleAtoi(consumable_arch, &arch);
+      if (arch <= 0) {
         return InternalError("Could not parse ROCm architecture number");
       }
 
