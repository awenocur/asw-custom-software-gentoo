# Upstream takes it upon themselves to assume that the resources dir is one
# directory above the binary, i.e. if /usr/bin/rstudio, then it should be
# /usr/resources. This patch allows to specify a target resources directory to
# cmake, and the rstudio runtime will respect this path.
#
# PR opened upstream at https://github.com/rstudio/ , #9199

--- a/CMakeGlobals.txt
+++ b/CMakeGlobals.txt
@@ -179,9 +179,14 @@ else()
    else()
      set(RSTUDIO_INSTALL_BIN bin)
    endif()
-   set(RSTUDIO_INSTALL_SUPPORTING .)
+   if(NOT RSTUDIO_INSTALL_SUPPORTING)
+       set(RSTUDIO_INSTALL_SUPPORTING .)
+   endif()
 endif()
 
+add_compile_definitions(RSTUDIO_RESOURCES_DIR="${RSTUDIO_INSTALL_SUPPORTING}")
+add_compile_definitions(RSTUDIO_SCRIPTS_DIR="${RSTUDIO_INSTALL_SCRIPTS}")
+
 # if the install prefix is /usr/local then tweak as appropriate
 if(UNIX)
    if(${CMAKE_INSTALL_PREFIX} STREQUAL "/usr/local")
--- a/src/cpp/desktop/DesktopOptions.cpp
+++ b/src/cpp/desktop/DesktopOptions.cpp
@@ -443,6 +443,6 @@ FilePath Options::supportingFilePath() const
    if (supportingFilePath_.isEmpty())
    {
       // default to install path
-      core::system::installPath("..",
+      core::system::installPath(RSTUDIO_RESOURCES_DIR,
                                 QApplication::arguments().at(0).toUtf8(),
                                 &supportingFilePath_);
@@ -460,15 +460,7 @@ FilePath Options::resourcesPath() const
 {
    if (resourcesPath_.isEmpty())
    {
-#ifdef RSTUDIO_PACKAGE_BUILD
-      // release configuration: the 'resources' folder is
-      // part of the supporting files folder
       resourcesPath_ = supportingFilePath().completePath("resources");
-#else
-      // developer configuration: the 'resources' folder is
-      // a sibling of the RStudio executable
-      resourcesPath_ = scriptsPath().completePath("resources");
-#endif
    }
 
    return resourcesPath_;
--- a/src/cpp/session/SessionOptions.cpp
+++ b/src/cpp/session/SessionOptions.cpp
@@ -87,7 +87,7 @@ core::ProgramStatus Options::read(int argc, char * const argv[], std::ostream& o
    core::system::unsetenv(kMonitorSharedSecretEnvVar);
 
    // compute the resource path
-   Error error = core::system::installPath("..", argv[0], &resourcePath_);
+   Error error = core::system::installPath(RSTUDIO_RESOURCES_DIR, argv[0], &resourcePath_);
    if (error)
    {
       LOG_ERROR_MESSAGE("Unable to determine install path: "+error.getSummary());
--- a/src/cpp/desktop/DesktopMain.cpp
+++ b/src/cpp/desktop/DesktopMain.cpp
@@ -776,7 +776,7 @@ int main(int argc, char* argv[])
 
       // get install path
       FilePath installPath;
-      error = core::system::installPath("..", argv[0], &installPath);
+      error = core::system::installPath(RSTUDIO_RESOURCES_DIR, argv[0], &installPath);
       if (error)
       {
          LOG_ERROR(error);
@@ -823,8 +823,8 @@ int main(int argc, char* argv[])
       if (confPath.isEmpty())
       {
          // default paths (then tweak)
-         sessionPath = installPath.completePath("bin/rsession");
-         scriptsPath = installPath.completePath("bin");
+	sessionPath = FilePath(RSTUDIO_SCRIPTS_DIR "/rsession");
+	scriptsPath = FilePath(RSTUDIO_SCRIPTS_DIR);
 
          // check for running in a bundle on OSX
 #ifdef __APPLE__
diff --git a/src/cpp/server/ServerOptions.cpp b/src/cpp/server/ServerOptions.cpp.new
index b235e29..388ac1f 100644
--- a/src/cpp/server/ServerOptions.cpp
+++ b/src/cpp/server/ServerOptions.cpp
@@ -141,7 +141,7 @@ ProgramStatus Options::read(int argc,
    using namespace boost::program_options;
 
    // compute install path
-   Error error = core::system::installPath("..", argv[0], &installPath_);
+   Error error = core::system::installPath(RSTUDIO_RESOURCES_DIR, argv[0], &installPath_);
    if (error)
    {
       LOG_ERROR_MESSAGE("Unable to determine install path: "+error.getSummary());
